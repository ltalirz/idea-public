#!/usr/bin/env python3
""" Produce plots, animations and data files from pickle files generated by iDEA

Add the directory containing this script to your PATH variable.
"""
from __future__ import division
from __future__ import print_function

# print splash
print('                                                                ')
print('              *   *   *    ****     *****     ****              ')
print('              *   *        *   *    *        *    *             ')
print('              *   *   *    *    *   *       *      *            ')
print('              *   *   *    *     *  *****   *      *            ')
print('              *   *   *    *    *   *       *      *            ')
print('               * *    *    *   *    *        *    *             ')
print('                *     *    ****     *****     ****              ')
print('                                                                ')
print('  +------------------------------------------------------------+')
print('  |                    Visualise iDEA Outputs                  |')
print('  |                                                            |')
print('  |                   Created by Jack Wetherell                |')
print('  |                    The University of York                  |')
print('  +------------------------------------------------------------+')
print('                                                                ')

# imports
import os
import sys
import pickle
import numpy as np
import iDEA.plot

def main():

    # import parameters file
    print('loading in parameters file...')
    pickle_file = "parameters.p"
    python_file = "parameters.py"
    if os.path.isfile(pickle_file):
        f = open(pickle_file,'rb')
        pm = pickle.load(f)
        f.close()
    elif os.path.isfile(python_file):
        sys.path.insert(0,os.getcwd())
        import parameters as pm
    else:
        print("neither {} nor {} found. File must have different name.".format(pickle_file, python_file))
        name = input("enter name of parameters file (without.py): ")
        pm = __import__(name)

    # gather file information from user
    file_names = str(input('enter file names to process (space seperated): ')).split(' ')
    td = bool(eval(input('is the data ground-state or time-dependent (gs=0,td=1): ')))

    # load the raw data in
    print('reading raw data:')
    data = []
    for fn in file_names:
        print('reading {}...'.format(fn))
        data.append(iDEA.plot.read_quantity(pm, fn))
    # ensure data is all the same shape
    for i in range(0, len(data)):
        for j in range(0, len(data)):
            if data[i].shape != data[j].shape:
                raise IOError('all files must have same shapes of data')

    # get the dimentions of the data
    if td == False:
        dim = len(data[0].shape)
    else:
        dim = len(data[0].shape) - 1

    # determine what the user wants to be processed
    save_data = bool(eval(input('save to data file (0=no,1=yes): ')))
    save_plot = bool(eval(input('save to pdf image (0=no,1=yes): ')))
    if td or dim==3:
        if save_data or save_plot:
            timestep = int(eval(input('timestep to save: ')))
        save_anim = bool(eval(input('save to mp4 video (0=no,1=yes): ')))
        if save_anim:
            step = int(eval(input('sample every n frames: n = ')))
    file_name = str(input('name of output file (leave blank for default): '))
    if file_name == '':
        file_name = None

    # process data in specified way
    print('processing raw data:')
    if td or dim==3:
        if save_data:
            iDEA.plot.to_data(pm, file_names, data, td, dim, file_name=file_name, timestep=timestep)
        if save_plot:
            iDEA.plot.to_plot(pm, file_names, data, td, dim, file_name=file_name, timestep=timestep)
        if save_anim:
            iDEA.plot.to_anim(pm, file_names, data, td, dim, file_name=file_name, step=step)
    else:
        if save_data:
            iDEA.plot.to_data(pm, file_names, data, td, dim, file_name=file_name)
        if save_plot:
            iDEA.plot.to_plot(pm, file_names, data, td, dim, file_name=file_name)

    # finish
    print('all jobs done')

if __name__ == '__main__':
    main()
